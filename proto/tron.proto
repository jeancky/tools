syntax = "proto3";

option go_package="./;tron";
package proto;

enum AccountType {
  Normal = 0;
  AssetIssue = 1;
  Contract = 2;
}

// vote message
message Vote {
  // the super rep address
  bytes vote_address = 1;
  // the vote num to this super rep.
  int64 vote_count = 2;
}

message Key {
  bytes address = 1;
  int64 weight = 2;
}

message Permission {
  enum PermissionType {
    Owner = 0;
    Witness = 1;
    Active = 2;
  }
  PermissionType type = 1;
  int32 id = 2; //Owner id=0, Witness id=1, Active id start by 2
  string permission_name = 3;
  int64 threshold = 4;
  int32 parent_id = 5;
  bytes operations = 6; //1 bit 1 contract
  repeated Key keys = 7;
}

/* Account */
message Account {
  /* frozen balance */
  message Frozen {
    int64 frozen_balance = 1; // the frozen trx balance
    int64 expire_time = 2; // the expire time
  }
  // account nick name
  bytes account_name = 1;
  AccountType type = 2;
  // the create address
  bytes address = 3;
  // the trx balance
  int64 balance = 4;
  // the votes
  repeated Vote votes = 5;
  // the other asset owned by this account
  map<string, int64> asset = 6;

  // the other asset owned by this accountï¼Œkey is assetId
  map<string, int64> assetV2 = 56;

  // the frozen balance for bandwidth
  repeated Frozen frozen = 7;
  // bandwidth, get from frozen
  int64 net_usage = 8;
  //Frozen balance provided by other accounts to this account
  int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  //Freeze and provide balances to other accounts
  int64 delegated_frozen_balance_for_bandwidth = 42;

  int64 old_tron_power = 46;
  Frozen tron_power = 47;

  // this account create time
  int64 create_time = 0x09;
  // this last operation time, including transfer, voting and so on.
  int64 latest_operation_time = 10;
  // witness block producing allowance
  int64 allowance = 0x0B;
  // last withdraw time
  int64 latest_withdraw_time = 0x0C;
  // not used so far
  bytes code = 13;
  bool is_witness = 14;
  bool is_committee = 15;
  // frozen asset(for asset issuer)
  repeated Frozen frozen_supply = 16;
  // asset_issued_name
  bytes asset_issued_name = 17;
  bytes asset_issued_ID = 57;
  map<string, int64> latest_asset_operation_time = 18;
  map<string, int64> latest_asset_operation_timeV2 = 58;
  int64 free_net_usage = 19;
  map<string, int64> free_asset_net_usage = 20;
  map<string, int64> free_asset_net_usageV2 = 59;
  int64 latest_consume_time = 21;
  int64 latest_consume_free_time = 22;

  // the identity of this account, case insensitive
  bytes account_id = 23;

  message AccountResource {
    // energy resource, get from frozen
    int64 energy_usage = 1;
    // the frozen balance for energy
    Frozen frozen_balance_for_energy = 2;
    int64 latest_consume_time_for_energy = 3;

    //Frozen balance provided by other accounts to this account
    int64 acquired_delegated_frozen_balance_for_energy = 4;
    //Frozen balances provided to other accounts
    int64 delegated_frozen_balance_for_energy = 5;

    // storage resource, get from market
    int64 storage_limit = 6;
    int64 storage_usage = 7;
    int64 latest_exchange_storage_time = 8;

  }
  AccountResource account_resource = 26;
  bytes codeHash = 30;
  Permission owner_permission = 31;
  Permission witness_permission = 32;
  repeated Permission active_permission = 33;
}